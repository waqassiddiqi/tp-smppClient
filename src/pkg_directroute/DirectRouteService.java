
package pkg_directroute;

import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "DirectRouteService", targetNamespace = "http://PKG_DirectRoute/", wsdlLocation = "classpath:wsdl/DirectRoute_1.wsdl")
public class DirectRouteService
    extends Service
{

    private final static URL DIRECTROUTESERVICE_WSDL_LOCATION;
    private final static WebServiceException DIRECTROUTESERVICE_EXCEPTION;
    private final static QName DIRECTROUTESERVICE_QNAME = new QName("http://PKG_DirectRoute/", "DirectRouteService");

    static {
        URL url = null;
        WebServiceException e = null;
        
        try {
            url = DirectRouteService.class.getClassLoader().getResource("wsdl/DirectRoute_1.wsdl");
        } catch (Exception ex) {
            e = new WebServiceException(ex);
        }
        
        DIRECTROUTESERVICE_WSDL_LOCATION = url;
        DIRECTROUTESERVICE_EXCEPTION = e;
    }

    public DirectRouteService() {
        super(__getWsdlLocation(), DIRECTROUTESERVICE_QNAME);
    }

    public DirectRouteService(WebServiceFeature... features) {
        super(__getWsdlLocation(), DIRECTROUTESERVICE_QNAME, features);
    }

    public DirectRouteService(URL wsdlLocation) {
        super(wsdlLocation, DIRECTROUTESERVICE_QNAME);
    }

    public DirectRouteService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, DIRECTROUTESERVICE_QNAME, features);
    }

    public DirectRouteService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public DirectRouteService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns DirectRoute
     */
    @WebEndpoint(name = "DirectRoutePort")
    public DirectRoute getDirectRoutePort() {
        return super.getPort(new QName("http://PKG_DirectRoute/", "DirectRoutePort"), DirectRoute.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DirectRoute
     */
    @WebEndpoint(name = "DirectRoutePort")
    public DirectRoute getDirectRoutePort(WebServiceFeature... features) {
        return super.getPort(new QName("http://PKG_DirectRoute/", "DirectRoutePort"), DirectRoute.class, features);
    }

    private static URL __getWsdlLocation() {
        if (DIRECTROUTESERVICE_EXCEPTION!= null) {
            throw DIRECTROUTESERVICE_EXCEPTION;
        }
        return DIRECTROUTESERVICE_WSDL_LOCATION;
    }

}
